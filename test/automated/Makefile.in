### @configure_input@

# Copyright (C) 2010-2013 Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

SHELL = @SHELL@

srcdir = @srcdir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
VPATH = $(srcdir)

# You can specify a different executable on the make command line,
# e.g. "make EMACS=../src/emacs ...".

# We sometimes change directory before running Emacs (typically when
# building out-of-tree, we chdir to the source directory), so we need
# to use an absolute file name.
EMACS = ${abs_top_builddir}/src/emacs

# Command line flags for Emacs.
EMACSOPT = -batch --no-site-file --no-site-lisp

# Extra flags to pass to the byte compiler.
BYTE_COMPILE_EXTRA_FLAGS =

# The actual Emacs command run in the targets below.
emacs = EMACSLOADPATH="$(abs_srcdir)/../../lisp:$(abs_srcdir)" LC_ALL=C "$(EMACS)" $(EMACSOPT)

# Common command to find subdirectories
setwins=subdirs=`find . -type d -print`; \
	for file in $$subdirs; do \
	   case $$file in */.* | */.*/* | */=* | ./data* ) ;; \
		*) wins="$$wins$${wins:+ }$$file" ;; \
	   esac; \
        done

.PHONY: all check

all: check

# The compilation stuff is copied from lisp/Makefile - see comments there.

.SUFFIXES: .elc .el

.el.elc:
	@echo Compiling $<
	@$(emacs) $(BYTE_COMPILE_EXTRA_FLAGS) -f batch-byte-compile $<


.PHONY: lisp-compile compile-targets compile-main compile-clean

lisp-compile:
	cd ../../lisp && $(MAKE) $(MFLAGS) compile EMACS="$(EMACS)"

# TARGETS is set dynamically in the recursive call from `compile-main'.
compile-targets: $(TARGETS)

# Compile all the Elisp files that need it.  Beware: it approximates
# `no-byte-compile', so watch out for false-positives!
compile-main: compile-clean lisp-compile
	@(cd $(srcdir) && $(setwins); \
	els=`echo "$$wins " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.el |g'`; \
	for el in $$els; do \
	  test -f $$el || continue; \
	  test ! -f $${el}c && GREP_OPTIONS= grep '^;.*no-byte-compile: t' $$el > /dev/null && continue; \
	  echo "$${el}c"; \
	done | xargs echo) | \
	while read chunk; do \
	  $(MAKE) $(MFLAGS) compile-targets EMACS="$(EMACS)" TARGETS="$$chunk"; \
	done

# Erase left-over .elc files that do not have a corresponding .el file.
compile-clean:
	@cd $(srcdir) && $(setwins); \
	elcs=`echo "$$wins " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.elc |g'`; \
	for el in $$(echo $$elcs | sed -e 's/\.elc/\.el/g'); do \
	  if test -f "$$el" -o \! -f "$${el}c"; then :; else \
	    echo rm "$${el}c"; \
	    rm "$${el}c"; \
	  fi \
	done


.PHONY: bootstrap-clean distclean maintainer-clean

bootstrap-clean:
	-cd $(srcdir) && rm -f *.elc */*.elc */*/*.elc */*/*/*.elc

distclean:
	rm -f Makefile

maintainer-clean: distclean bootstrap-clean


check: compile-main
	@(cd $(srcdir) && $(setwins); \
	pattern=`echo "$$wins " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.el |g'`; \
	for el in $$pattern; do \
	  test -f $$el || continue; \
	  args="$$args -l $$el"; \
	  els="$$els $$el"; \
	done; \
	echo Testing $$els; \
	$(emacs) $$args -f ert-run-tests-batch-and-exit)

# Makefile ends here.
